#!/bin/sh
#
# Description: Run check on jails (NRPE output)
# Usage: check setup
#

# shellcheck source=./includes
LIBDIR="$(dirname $0)" && . "${LIBDIR}/includes"

return=0
nb_crit=0
nb_warn=0
nb_ok=0
nb_unkn=0
output=""

# Verify backup partition is mounted and writable
if ! findmnt -O rw --mountpoint "${BACKUP_PARTITION}" > /dev/null; then
    nb_crit=$((nb_crit + 1))
    output="${output}CRITICAL - Backup disk '/backup' is not mounted (or read-only) !\n"
    return=2
else
    nb_ok=$((nb_ok + 1))
    output="${output}OK - Backup disk '/backup' is mounted and writable.\n"
fi

# Check if the firewall file is sourced

minifirewall_config=/etc/default/minifirewall

if [ -n "${FIREWALL_RULES}" ] \
&& [ -r "${FIREWALL_RULES}" ] \
&& [ -f "${minifirewall_config}" ]; then
    minifirewall_version=$(grep -E -o "^VERSION=(\S+)" /etc/init.d/minifirewall | head -1 | cut -d '=' -f 2 | tr -d "'" | tr -d '"')

    if [ -n "${minifirewall_version}" ] && dpkg --compare-versions "${minifirewall_version}" ge "22.03"; then
        # Minifirewall 22.03+ includes files automatically
        nb_ok=$((nb_ok + 1))
        output="${output}OK - Firewall file '${FIREWALL_RULES}' is present.\n"
    else
        if grep -qE "^(\.|source) ${FIREWALL_RULES}" "${minifirewall_config}"; then
            nb_ok=$((nb_ok + 1))
            output="${output}OK - Firewall file '${FIREWALL_RULES}' is sourced by '${minifirewall_config}'.\n"
        else
            nb_warn=$((nb_warn + 1))
            output="${output}WARNING - Firewall file '${FIREWALL_RULES}' doesn't seem to be sourced by '${minifirewall_config}'\n"
            [ "${return}" -le 1 ] && return=1
        fi
    fi
fi

# Check if jails are started
nb_on=0
nb_off=0
for jail_name in $(jails_list); do
    if "${LIBDIR}/bkctld-is-on" "${jail_name}"; then
        nb_on=$((nb_on + 1))
    else
        expected_state="ON"
        check_policy_file=$(current_jail_check_policy_file "${jail_name}")

        if [ -f "${check_policy_file}" ]; then
            expected_state=$(read_variable "${check_policy_file}" "EXPECTED_STATE")
        fi
        if [ "${expected_state}" != "OFF" ]; then
            nb_off=$((nb_off + 1))
        fi
    fi
done
if [ "${nb_off}" -eq 0 ]; then
    output="${output}OK - all jails are in their expected state.\n"
    nb_ok=$((nb_ok + 1))
else
    output="${output}CRITICAL - ${nb_off} jail(s) shouldn't be OFF !\n"
    nb_crit=$((nb_crit + 1))
    [ "${return}" -le 2 ] && return=2
fi

# Check if there is no more than one inc running
nb_inc_running=$(pgrep --full --count "bkctld inc")
if [ "${nb_inc_running}" -eq 0 ]; then
    output="${output}OK - no inc operations currently running.\n"
    nb_ok=$((nb_ok + 1))
elif [ "${nb_inc_running}" -eq 1 ]; then
    output="${output}OK - one inc operation currently running.\n"
    nb_ok=$((nb_ok + 1))
else
    output="${output}CRITICAL - ${nb_inc_running} inc operations currently running (should be 1 or 0)\n"
    nb_crit=$((nb_crit + 1))
    [ "${return}" -le 2 ] && return=2
fi

# Warn about inc/rm operations running at the same time
nb_inc_running=$(pgrep --full --count "bkctld inc")
nb_rm_running=$(pgrep --full --count "bkctld rm")
if [ "${nb_inc_running}" -ge 1 ] && [ "${nb_rm_running}" -eq 1 ]; then
    output="${output}WARNING - Inc and rm operations running simulteanously\n"
    nb_warn=$((nb_warn + 1))
    [ "${return}" -le 1 ] && return=1
else
    output="${output}OK - No inc and rm operations running simulteanously.\n"
    nb_ok=$((nb_ok + 1))
fi


# Look at inc creation time in the previous days
timing_files=$(find "${DATADIR}" -maxdepth 1 -type f -name "time-inc_????-??-??-??" -ctime -10)
timing_nb_ok=0
timing_nb_warn=0
timing_nb_crit=0
timing_unfinished=0
for timing_file in $timing_files; do

    if ! tail -n1 ${timing_file} | grep -q GLOBAL; then 
        # Ignore if it's an inc not finished
        timing_unfinished=$((timing_unfinished + 1))
        continue;
    fi

    global_time=$(tail -n1 ${timing_file} | grep  GLOBAL | cut -d ';' -f1)
    if [ $global_time -gt $((INCTIME_CRITICAL * 3600)) ]; then
        timing_nb_crit=$((timing_nb_crit + 1))
    elif [ $global_time -gt $((INCTIME_WARNING * 3600)) ]; then
        timing_nb_warn=$((timing_nb_warn + 1))
    else
        timing_nb_ok=$((timing_nb_ok + 1))
    fi
done

if [ $timing_nb_crit -ge 1 ]; then
    output="${output}CRITICAL - ${timing_nb_crit} incs took more than ${INCTIME_CRITICAL} hours to be created in the last 10 days\n"
    nb_crit=$((nb_crit + 1))
    [ "${return}" -le 2 ] && return=2
elif [ $timing_nb_warn -ge 1 ]; then
    output="${output}WARNING - ${timing_nb_warn} incs took more than ${INCTIME_WARNING} hours to be created in the last 10 days\n"
    nb_warn=$((nb_warn + 1))
    [ "${return}" -le 1 ] && return=1
else
    output="${output}OK - All inc creation time is bellow ${INCTIME_WARNING} hours in the last 10 days.\n"
    nb_ok=$((nb_ok + 1))
fi

# Look if theres more than one inc operation that is unfinished
if [ $timing_unfinished -gt 1 ]; then
    output="${output}CRITICAL - ${timing_unfinished} incs did not finish ! (Possible overlap or inc creation aborted)\n"
    nb_crit=$((nb_crit + 1))
    [ "${return}" -le 2 ] && return=2
fi


[ "${return}" -ge 0 ] && header="OK"
[ "${return}" -ge 1 ] && header="WARNING"
[ "${return}" -ge 2 ] && header="CRITICAL"
[ "${return}" -ge 3 ] && header="UNKNOWN"

printf "%s - %s UNK / %s CRIT / %s WARN / %s OK\n\n" "${header}" "${nb_unkn}" "${nb_crit}" "${nb_warn}" "${nb_ok}"

echo -n "${output}" | grep -E "^UNKNOWN"
echo -n "${output}" | grep -E "^CRITICAL"
echo -n "${output}" | grep -E "^WARNING"
echo -n "${output}" | grep -E "^OK"

exit "${return}"
